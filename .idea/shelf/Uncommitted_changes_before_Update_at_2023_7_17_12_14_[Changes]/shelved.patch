Index: index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const request = require('request-promise');\r\nconst { v4: uuidv4 } = require('uuid')\r\nconst CryptoJS = require(\"crypto-js\")\r\nconst Crypto = require(\"crypto\")\r\nconst fs = require('fs');\r\nconst { format } = require('date-fns');\r\n\r\n\r\nconst currentDate = new Date();\r\nconst filePath = `${format(currentDate, 'yyyyMMdd')}.txt`;  // 根据今天的日期生成文件路径\r\n\r\nconst defaultYmlFilePath = `ccc2.yml`;  // 默认配置文件\r\nconst resultYmlFilePath = `result.yml`;  // 最终的配置文件\r\n\r\nconst VMESS_URL = fromBase64(\"aHR0cHM6Ly93d3cueGNoOGtmLnh5ejoyMDAwMC9hcGkvZXZtZXNz\");\r\nconst IP_URL = \"https://ip.useragentinfo.com/jsonp?ip=\";\r\n\r\n// const area = [999, 2, 34, 48, 49, 17, 7, 46, 4, 3, 33,\r\n//     36, 9, 7, 25, 5, 11, 8, 32, 38, 39, 6, 4, 10, 12, 13,\r\n//     15, 19, 20, 21, 22, 23, 30, 31, 35, 36, 37, 40, 41, 42, 43, 44];\r\n\r\n\r\n(async function () {\r\n    await queryVmessUrl();\r\n\r\n    convert2ClashYml();\r\n\r\n    // console.log(\"***************抓取完成***************\");\r\n    // 转换为 clash\r\n})()\r\n\r\n/**\r\n * 查询vmess\r\n */\r\nasync function queryVmessUrl() {\r\n    for (let i = 1; i < 101; i++) {\r\n        let option = {\r\n            method: 'GET',\r\n            // uri: getCommonParams(VMESS_URL, area[index]),\r\n            uri: getCommonParams(VMESS_URL, i),\r\n            headers: {\r\n                'User-Agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Mobile Safari/537.36'\r\n            }\r\n        }\r\n        let result = await request.get(option)\r\n        try {\r\n            result = aesDecrypt(result.trim()).trim()\r\n            result = await addAddress(result)\r\n            // console.log(result)\r\n            write2File(result + \"\\n\");\r\n        } catch (e) {\r\n\r\n        }\r\n        sleep(6000)\r\n    }\r\n}\r\n\r\n/**\r\n * 转换为订阅链接\r\n */\r\nasync function convert2ClashYml() {\r\n    // 使用 `fs.readFile()` 方法读取文件内容\r\n    fs.readFile(filePath, 'utf-8', (err, data) => {\r\n        if (err) {\r\n            console.error('读取文件内容时发生错误:', err);\r\n            return;\r\n        }\r\n        // console.log('文件内容:', data);\r\n        // 处理数据\r\n        let vmessLinks = data.trim().split(\"\\n\");\r\n        // console.log(vmessLinks.length);\r\n        let clashProxies = [];\r\n        let clashProxyGroupNames = [];\r\n        for (let index = 0; index < vmessLinks.length; index++) {\r\n            let item = vmessLinks[index];\r\n            let config = parseVmessLink(item)\r\n            let groupName = config.ps + index;\r\n            let proxy = \"\";\r\n            if (config.net == \"ws\") {\r\n                proxy = vmessToWSFormattedString(config, index)\r\n            } else if (config.net == \"tcp\") {\r\n                proxy = vmessToTCPFormattedString(config, index)\r\n            }\r\n            // console.log(config)\r\n            // let proxy = {\r\n            //     name: config.ps,\r\n            //     type: 'vmess',\r\n            //     server: config.add,\r\n            //     port: config.port,\r\n            //     uuid: config.aid,\r\n            //     alterId: config.id,\r\n            //     cipher: 'auto',\r\n            //     network: config.net,\r\n            //     tls: true,\r\n            //     'ws-path': config.path,\r\n            //     tls13: true,\r\n            //     'skip-cert-verify': false,\r\n            //     'client-fingerprint': \"chrome\",\r\n            //     tfo: false,\r\n            //     'ws-opts': {\r\n            //         path: config.path,\r\n            //         headers: {\r\n            //             Host: config.host\r\n            //         }\r\n            //     },\r\n            // };\r\n            \r\n            clashProxyGroupNames.push(groupName);\r\n            clashProxies.push(proxy);\r\n        }\r\n\r\n        let proxiesString = \"\";\r\n        for (let index = 0; index < clashProxies.length; index++) {\r\n            let item = clashProxies[index];\r\n            proxiesString += item;\r\n        }\r\n        \r\n        let groupNameString = \"\";\r\n        for (let index = 0; index < clashProxyGroupNames.length; index++) {\r\n            let item = clashProxyGroupNames[index];\r\n            groupNameString += \"      - \" + item + \"\\n\";\r\n        }\r\n        // console.log(proxiesString);\r\n\r\n        // 读取默认配置文件\r\n        fs.readFile(defaultYmlFilePath, 'utf-8', (err, data) => {\r\n            data = data.replaceAll(\"# 我的订阅\", proxiesString);\r\n            data = data.replaceAll(\"# 代理地址名称\", groupNameString);\r\n            fs.writeFile(resultYmlFilePath, data, (err) => {\r\n                if (err) {\r\n                    console.error('写入文件失败:', err);\r\n                } else {\r\n                    console.log('写入文件成功');\r\n                }\r\n            });\r\n        });\r\n\r\n    });\r\n\r\n}\r\n\r\nfunction vmessToWSFormattedString(vmessObj, index) {\r\n    // 构建格式化的字符串\r\n    // - {name: \"\", server: 89.163.152.84, port: 443, client-fingerprint: chrome, type: vmess, uuid: 418048af-a293-4b99-9b0c-98ca3580dd24, alterId: 64, cipher: auto, tls: true, tfo: false, skip-cert-verify: false, network: ws, ws-opts: {path: /path/120121122706, headers: {Host: www.45027699.xyz}}}\r\n    const formattedString = `  - {name: ${vmessObj.ps}${index}, server: ${vmessObj.add}, port: ${vmessObj.port}, client-fingerprint: chrome, type: vmess, uuid: ${vmessObj.id}, alterId: ${vmessObj.aid}, cipher: auto, tls: ${vmessObj.tls}, tfo: false, skip-cert-verify: false, network: ${vmessObj.net}, ws-opts: {path: ${vmessObj.path}, headers: {Host: ${vmessObj.host}}}}\\n`;\r\n    // 返回格式化的字符串\r\n    return formattedString;\r\n}\r\n\r\nfunction vmessToTCPFormattedString(vmessObj, index) {\r\n    // 构建格式化的字符串\r\n    // - {name: \"\", server: 89.163.152.84, port: 443, client-fingerprint: chrome, type: vmess, uuid: 418048af-a293-4b99-9b0c-98ca3580dd24, alterId: 64, cipher: auto, tls: true, tfo: false, skip-cert-verify: false}\r\n    const formattedString = `  - {name: ${vmessObj.ps}${index}, server: ${vmessObj.add}, port: ${vmessObj.port}, client-fingerprint: chrome, type: vmess, uuid: ${vmessObj.id}, alterId: ${vmessObj.aid}, cipher: auto, tls: ${vmessObj.tls}, tfo: false, skip-cert-verify: false}\\n`;\r\n    // 返回格式化的字符串\r\n    return formattedString;\r\n  }\r\n\r\n/// 解析地址\r\nfunction parseVmessLink(link) {\r\n    // 解析链接中的详细信息\r\n    const decodedLink = fromBase64(link.replace(\"vmess://\", \"\"));\r\n    // console.log(decodedLink.trim());\r\n    const details = JSON.parse(decodedLink);\r\n\r\n    // 构建 vmess 对象\r\n    const vmess = {\r\n        v: \"2\",\r\n        ps: details.ps,\r\n        add: details.add,\r\n        port: details.port,\r\n        id: details.id,\r\n        aid: details.aid,\r\n        net: details.net,\r\n        type: details.type,\r\n        host: details.host,\r\n        path: details.path,\r\n        tls: details.tls === \"tls\",\r\n        sni: details.sni,\r\n        ws: details.net === \"ws\",\r\n        riff: details.net === \"h2\",\r\n        \"ws-path\": details.path,\r\n        \"ws-headers\": {\r\n            Host: details.host\r\n        }\r\n    };\r\n\r\n    // 返回 vmess 对象\r\n    return vmess;\r\n}\r\n\r\n/**\r\n * 获取VMESS\r\n * @param {*} url \r\n * @param {*} area 地区编号\r\n * @returns \r\n */\r\nfunction getCommonParams(url, area) {\r\n    let sign = \"B89F08DFD5A44402B2E8165C82623A444AA15139\";\r\n    let deviceId = uuidv4().replace(/-/g, \"\");\r\n    let apps = md5(sign + deviceId);\r\n    let time = new Date().getTime();\r\n    let result = url + \"&vip=true&proto=4&platform=android&ver=7.5.3&deviceid=\" + deviceId + \"&unicode=\" + deviceId + \"&t=\"\r\n        + time\r\n        + \"&code=C1LCR6X&recomm_code=&f=2022-07-29&install=2022-06-29&token=&package=com.network.xf100&width=411.42856&height=774.8571&apps=\"\r\n        + apps + \"&area=\" + area;\r\n    return result;\r\n}\r\n\r\n/**\r\n * MD5加密\r\n * @param {*} data \r\n * @returns \r\n */\r\nfunction md5(data) {\r\n    const md5 = Crypto.createHash('md5');\r\n    const result = md5.update(data).digest('hex');\r\n    return result;\r\n}\r\n\r\n/**\r\n * AES解密 \r\n * AES/CBC/NoPadding  128位   密钥：awdtif20190619ti  偏移量：awdtif20190619ti\r\n * @param {*} word \r\n * @returns \r\n */\r\nfunction aesDecrypt(word) {\r\n    var keyStr = 'awdtif20190619ti';\r\n    var key = CryptoJS.enc.Utf8.parse(keyStr);\r\n    var iv = CryptoJS.enc.Utf8.parse(keyStr);\r\n    var decrypt = CryptoJS.AES.decrypt(word, key, { mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.NoPadding, iv: iv });\r\n    return CryptoJS.enc.Utf8.stringify(decrypt).toString();\r\n}\r\n\r\n/**\r\n * 睡眠\r\n * @param {*} delay \r\n */\r\nfunction sleep(delay) {\r\n    var start = (new Date()).getTime();\r\n    while ((new Date()).getTime() - start < delay) {\r\n        continue;\r\n    }\r\n}\r\n\r\n/**\r\n * 转成Base64\r\n * @param {*} str \r\n * @returns \r\n */\r\nfunction toBase64(str) {\r\n    return Buffer.from(str).toString('base64')\r\n}\r\n\r\n/**\r\n * 解码base64\r\n * @param {*} str \r\n * @returns \r\n */\r\nfunction fromBase64(str) {\r\n    return Buffer.from(str, 'base64').toString()\r\n}\r\n\r\n/**\r\n * 为协议添加地址\r\n * @param {*} data \r\n * @returns \r\n */\r\nasync function addAddress(data) {\r\n    if (data.indexOf('vmess://') != -1) {\r\n        // vmess协议\r\n        data = data.replace(/vmess\\:\\/\\//, \"\")\r\n        data = fromBase64(data)\r\n        let protocol = JSON.parse(data)\r\n        let ip = protocol.add\r\n        let option = {\r\n            uri: IP_URL + ip,\r\n            method: 'GET',\r\n            headers: {\r\n                'User-Agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Mobile Safari/537.36'\r\n            }\r\n        }\r\n        let ipResult = await request(option)\r\n        ipResult = ipResult.replace(\"callback(\", \"\").replace(\");\", \"\")\r\n        let ipObject = JSON.parse(ipResult)\r\n        let area = ipObject.country + ipObject.province\r\n        protocol.ps = area\r\n        // console.log(toBase64(JSON.stringify(protocol)))\r\n        return \"vmess://\" + toBase64(JSON.stringify(protocol))\r\n    }\r\n    return \"\"\r\n}\r\n\r\n/// 写入并追加文件\r\nfunction write2File(text) {\r\n    // const contentToAppend = '要追加的内容';  // 要追加的内容\r\n\r\n    // 使用 `fs.appendFile()` 方法追加内容\r\n    fs.appendFile(filePath, text, (err) => {\r\n        if (err) {\r\n            console.error('追加文件内容时发生错误:', err);\r\n            return;\r\n        }\r\n        // console.log('内容已成功追加到文件:', filePath);\r\n    });\r\n}\r\n\r\n/**\r\n * 转换成字符串 无引号\r\n * @param {} json \r\n * @returns \r\n */\r\nfunction jsonToString(json) {\r\n    // 将 JSON 对象转换为字符串\r\n    const jsonString = JSON.stringify(json);\r\n\r\n    // 去除字符串中的引号\r\n    const jsonStringWithoutQuotes = jsonString.replace(/\"/g, \"\");\r\n\r\n    // 返回处理后的字符串\r\n    return jsonStringWithoutQuotes;\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.js b/index.js
--- a/index.js	(revision fa3476e8d7bbd4de3a3f467be3fc779e46dbae9e)
+++ b/index.js	(date 1689567281413)
@@ -51,7 +51,7 @@
         } catch (e) {
 
         }
-        sleep(6000)
+        sleep(10000)
     }
 }
 
